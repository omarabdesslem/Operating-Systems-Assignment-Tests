#!/usr/bin/env python3

import unittest
import subprocess
import hashlib
import tempfile
import random
import base64
import os


program_name = "./digest"
n = 2

class bcolors:
    ENDC = '\033[0m'
    Red = '\033[91m'
    Green = '\033[92m'
    Blue = '\033[94m'
    Cyan = '\033[96m'
    White = '\033[97m'
    Yellow = '\033[93m'
    Magenta = '\033[95m'
    Grey = '\033[90m'
    Black = '\033[90m'

    def disable(self):
        self.Red = ''
        self.Green = ''
        self.Blue = ''
        self.Cyan = ''
        self.White = ''
        self.Yellow = ''
        self.Magenta = ''
        self.Grey = ''
        self.Black = ''
        self.ENDC = ''

test_failed = False


def test(func):
    def wrapper(self):
        global test_failed
        print(func.__name__ + ": ", end="")
        try:
            func(self)
        except AssertionError as e:
            print(bcolors.Red + "FAILED" + bcolors.ENDC)
            print(str(e))
            test_failed = True
        else:
            print(bcolors.Green + "SUCCESS" + bcolors.ENDC)

    return wrapper


class Test(unittest.TestCase):

    @test
    def test_string_hash(self):
        prg_name = "./digest"
        random_bytes = os.urandom(n)
        encoded_bytes = base64.b64encode(random_bytes)
        input_string = encoded_bytes.decode('utf-8')
        hashed_input = hashlib.sha1(input_string.encode()).hexdigest().strip()
        output_string = subprocess.check_output([prg_name, str(input_string)], bufsize=4096).decode().replace('\n',
                                                                                                              '').replace(
            '(null)', '').strip()
        expected_result = hashed_input.strip()
        if output_string not in expected_result:
        	raise AssertionError(f'The expected hash is different than the result')
        print(f"{bcolors.Green}TEST 1 OK {bcolors.ENDC}")

    #@test
    def test_file_hash(self):
        list_of
        
        
if __name__ == "__main__":

	t = Test()
	t.test_string_hash()
	print('--- TESTING BUITIN COMMANDS ---')



     
